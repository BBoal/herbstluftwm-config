#!/usr/bin/env bash
# shellcheck source=/dev/null disable=SC2207

# HerbstluftWM Config  --- Tweaked and tailored for personal use with
# the help of several knowledgeable mentioned individuals.
#
# Copyright (c) 2023  Bruno Boal <bruno.boal@tutanota.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.


# Functions {{{1
_hc()   { herbstclient "$@";}
_bind() { _hc keybind "$@";}
_set()  { _hc set "$@";}
_attr() { _hc attr "$@";}
_rule() { _hc rule "$@";}
_autostart_reload() { _hc silent get_attr my_not_first_autostart;}
## Helper function to organize workspaces
_arrange_workspace() {
    local t=$1
    cat <<EOF
herbstclient chain , lock \
, set swap_monitors_to_get_tag true \\
EOF
    for (( m=0;m<"${monitor_count}";m++ )); do
        cat <<EOF
, focus_monitor ${m} , use_index $((m+t*monitor_count)) \\
EOF
    done
    cat <<EOF
, set swap_monitors_to_get_tag false , unlock
EOF
}

# }}}1

# Initialization {{{1
_hc emit_hook reload

### source: (https://github.com/ypnos/hlwm)
## clearing bindings and rules
for action in keyunbind mouseunbind unrule ; do
    _hc "$action" --all
done

## resets active,floating,fullscreen,minimal,normal,tiling and urgent
_hc foreach T theme. sprintf CHILDREN "%c.reset" T set_attr CHILDREN true

## regular tags have the 'my_original' attribute set and are clean of empty
## frames on reload. Any additional tags created (without the my_original attr)
## are removed, IF EMPTY.
### idea: (https://github.com/t-wissmann/dotfiles)
if _autostart_reload; then
    _hc chain . lock \
        . foreach T tags.by-name \
            sprintf ATTR_client_count '%c.client_count' T and \
                , compare ATTR_client_count = 0 \
                , sprintf ATTR_NAME '%c.name' T or \
                    ,, silent sprintf ATTR_orig_tag '%c.my_original_tag' T and \
                        + compare ATTR_orig_tag = true \
                        + substitute T_NAME ATTR_NAME use T_NAME \
                        + foreach R tags.focus.tiling.root --recursive remove \
                        + try use_previous \
                    ,, substitute NAME ATTR_NAME silent merge_tag NAME \
        . unlock
fi
# }}}1

# Variables {{{1

## Modkeys
Hyper=Mod3

## TODO Colors
xrdb_colors=( \
                # Dark Colors
# color0    color1    color2    color3    color4    color5    color6    color7
"#002c41" "#e27878" "#82c9b6" "#ffa623" "#2d539e" "#7759b4" "#3f83a6" "#e5ebee" \
# BLACK      RED      GREEN    YELLOW     BLUE     MAGENTA    CYAN      WHITE
"#99aab3" "#ff4000" "#17e364" "#eed955" "#4db8ff" "#787ef4" "#84a0c6" "#ffffff" \
# color8    color9   color10   color11   color12   color13   color14   color15
                # Light Colors
)

## config dir
hc_dir="$XDG_CONFIG_HOME/herbstluftwm"
[[ -z "$HLWM_HOME" ]] &&  _hc export HLWM_HOME="$hc_dir"

## wallpapers dir
u_wallpapers="$XDG_CONFIG_HOME/wallpapers"

## Monitor setup
### User preference
#### with n tags per monitor -> L0(lower0) U1(upper0) R0(right0),
#### L1 U1 R1, ... , Ln Un Rn, (number of monitors * n workspaces)
u_tags_per_monitor=2
tag_keys=( {1..9} 0 )
#### monitor names are "cut" in the for loop below, using '_' as a separator
#### and taking only the first character from the initial `u_monitor_name`
u_monitor_name=("lower_center" "upper_center" "right_side" "left_side" )
#### number of physical monitors
monitor_count=$(xrandr --current | grep -c '\sconnected')
#### filtering through the name list
u_monitor_name=( "${u_monitor_name[@]::${monitor_count}}" )
#### getting first char turned uppercase of u_monitor_name
for mon in "${u_monitor_name[@]}"; do
    prefix_mon_name="${mon%_*}"
    char_prefix_mon_name="${prefix_mon_name::1}"
    upper_char_prefix_mon_name+=( "${char_prefix_mon_name^}" )
done
#### number of vip clients to save for fast focus
u_max_saved_clients=4

unset prefix_mon_name char_prefix_mon_name

#### adapted idea from: (https://github.com/t-wissmann/dotfiles)
u_seq_steps=( $(seq 0 24) )
u_steps=( $(seq 0 2 8) $(seq 12 4 24) $(seq 32 8 64) $(seq 57 -8 33) \
        $(seq 25 -4 13) $(seq 9 -2 1) )
u_opac_steps=( $(seq 100 -10 10) )
#### Offset example: "${u_seq_steps[@]:1}"  ->  1 2 3 4 5 6 7 8 9 10 .. 24

# }}}1

# Tags - Workspaces - Monitors {{{1

## naming tags
for ((t=0; t<"${u_tags_per_monitor}";t++)); do
    for i in "${!upper_char_prefix_mon_name[@]}"; do
        ### combining L U R with chosen num of tags/monitor L0 U0 R0 .. L2 U2 R2
        tag_names+=( "${upper_char_prefix_mon_name[${i}]}""${t}" )
    done
    ### Hyper-Super-F1 gets L0 U0 R0 in monitors
    _bind "$Hyper+Super+F$((t+1))" spawn bash -c "$(_arrange_workspace ${t})"
done
unset upper_char_prefix_mon_name

## defining and assigning tags to keys
_hc silent rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
    if ! _hc silent attr tags.by-name."${tag_names[$i]}" ; then
        _hc add "${tag_names[$i]}"
        _hc new_attr bool tags.by-name."${tag_names[${i}]}".my_original_tag true
    fi
    key="${tag_keys[$i]}"
    if [ -n "$key" ] ; then
        _bind "Super+$key" or \
            . and , compare tags.focus.index = "$i" , try use_previous \
            . chain \
                , silent substitute M tags."$i".my_monitor focus_monitor M \
                , use_index "$i"
        _bind "$Hyper+$key" move_index "$i"
        _bind "$Hyper+Shift+$key" chain . lock . move_index "$i" \
            . silent substitute M tags."$i".my_monitor focus_monitor M \
            . use_index "$i" . unlock
        _bind "$Hyper+Shift+Ctrl+$key" \
                spawn "${hc_dir}"/_move_frame_with_clients "${tag_names[$i]}"
    fi
done

# Statically define which tag should be send to which monitor
### source: (https://github.com/mendess/spell-book/runes)
_lock_in_monitor_the_tags() {
    local mon="$1"
    shift
    for args; do
        _hc chain \
            , silent new_attr string tags."$args".my_monitor \
            , silent set_attr tags."$args".my_monitor "$mon"
    done
}
# Lock tags to specific monitors. e.g
## lock_in_monitor_the_tags 0 {0,3,6}
## lock_in_monitor_the_tags 1 {1,4,7}
for ((m=0;m<"${monitor_count}";m++)); do
    for t in "${!tag_names[@]}"; do
        if (( t % monitor_count == 0 )); then
            _lock_in_monitor_the_tags "$m" "$((t+m))"
        fi
    done
done

## auto-detect physical monitors
## REMINDER that each monitor needs to be populated with an available tag
_hc detect_monitors

## naming monitors
for n in "${!u_monitor_name[@]}" ;  do
    _hc try silent rename_monitor "${n}" "${u_monitor_name[${n}]}"
done

## wallpapers
if [[ "${HOSTNAME:-$(hostname)}"  =~ tiny|desktop ]]; then
    xwallpaper --output DP-2-1 --center "$u_wallpapers"/root_blue.png \
        --output HDMI-1 --center "$u_wallpapers"/cron_blue.png &> /dev/null
    ### --output DP-2-8 --center "$u_wallpapers"/wallhaven-wq8ewp_1200x1920.png
fi
# }}}1

# Keybindings {{{1
# mouse {{{2
_hc mousebind Super+Button1 move
_hc mousebind Super+Button2 zoom
_hc mousebind Super+Button3 resize
# }}}2

# top level commands {{{2
_bind $Hyper+Alt+q  spawn systemctl poweroff
_bind $Hyper+Alt+l  quit
_bind $Hyper+Alt+r  reload
# }}}2

# launching programs {{{2
## general
_bind $Hyper+Return      spawn "${TERMINAL:-xterm}"
_bind Super+Return       spawn xterm -e setxkbmap -option ctrl:hyper_capscontrol
_bind Super+Delete       spawn xterm -e "$HOME/scripts/tm" #TMUX
_bind $Hyper+BackSpace   spawn rofi -show window -modi window -show-icons
_bind $Hyper+Scroll_Lock spawn slock
## specific
_bind Ctrl+Super+Prior       spawn pactl set-sink-volume @DEFAULT_SINK@ +1000
_bind Ctrl+Super+Next        spawn pactl set-sink-volume @DEFAULT_SINK@ -1000
_bind Ctrl+Super+Pause       spawn pactl set-sink-mute   @DEFAULT_SINK@ toggle
_bind Ctrl+Super+Scroll_Lock spawn pactl set-source-mute @DEFAULT_SINK@ toggle
_bind $Hyper+Super+w         spawn firefox
_bind $Hyper+Super+e         spawn emacs
_bind $Hyper+Super+m         spawn thunar
_bind $Hyper+Super+r         spawn "$hc_dir/dmenu_run_hlwm"
# }}}2

# motions {{{2
## focus {{{3
### clients
_bind Super+h     silent focus left --level=all
_bind Super+j     silent focus down --level=all
_bind Super+k     silent focus up --level=all
_bind Super+l     silent focus right --level=all
_bind Super+Left  silent focus_edge left
_bind Super+Down  silent focus_edge down
_bind Super+Up    silent focus_edge up
_bind Super+Right silent focus_edge right
### visible clients/monitors only
#### Necessary logic because 'focus_crosses_monitor_boundaries' is set to false
_bind $Hyper+h  silent or , focus left  -i , focus_monitor -l
_bind $Hyper+j  silent or , focus down  -i , focus_monitor -d
_bind $Hyper+k  silent or , focus up    -i , focus_monitor -u
_bind $Hyper+l  silent or , focus right -i , focus_monitor -r
### monitors
_bind Super+y   silent focus_monitor -l
_bind Super+u   silent focus_monitor -d
_bind Super+i   silent focus_monitor -u
_bind Super+o   silent focus_monitor -r
### focus previous tag
_bind Super+BackSpace  use_previous
### source: (https://github.com/t-wissmann/dotfiles)
## jumps to urgent either from a client or a frame
## next call will try to return to previous client if applicable
_bind $Hyper+i  silent or \
    : substitute WINID clients.focus.winid and \
        . jumpto urgent \
        . try new_attr string clients.my_oldfocus \
        . set_attr clients.my_oldfocus WINID \
    : jumpto urgent \
    : substitute WINID clients.my_oldfocus and \
        . jumpto WINID \
        . remove_attr clients.my_oldfocus \
        . spawn notify-send -t 3000 \
            -i edit-undo HLWM 'Jump to previously focused window' \
    : spawn notify-send -t 3000 \
        -i messagebox_warning HLWM 'No urgent or formerly focused window'

## Assign keys to VIP clients for fast focus
### e.g Super+Ctrl+1 sets the first client to be called with Super+Shift+1
for ((i=1;i<="${u_max_saved_clients}";i++)); do
    _bind Super+Ctrl+"${i}" spawn "${hc_dir}"/_save_vip_client "${i}"
done

## }}}3

## cycle {{{3
### clients and frames
_bind Super+Tab       cycle_all +1
_bind Super+Shift+Tab cycle_all -1
### clients
_bind Super+b         cycle +1
_bind Super+Shift+b   cycle -1
### frames
_bind Super+v         cycle_frame +1
_bind Super+Shift+v   cycle_frame -1
### tags
_bind Super+period    use_index +"$monitor_count"
_bind Super+comma     use_index -"$monitor_count"
_bind $Hyper+period   use_index +1 --skip-visible
_bind $Hyper+comma    use_index -1 --skip-visible
### monitors
_bind Super+c         cycle_monitor +1
_bind Super+Shift+c   cycle_monitor -1
## }}}3

## shifting {{{3
### clients and frames

#### Function that detaches focused client to a dedicated frame if,
#### in a multiple client frame near the monitor's edge the shift command is
#### executed in the direction of the mentioned edge. Empty frames are also
#### closed in the process.
_shift_or_detach() {
    split_dir="$2"
    # parsing movement to split options
    [[ "$2" == "up" ]] && split_dir="top"
    [[ "$2" == "down" ]] && split_dir="bottom"
    # When shifting right the empty frame to close is on the left (opposite)
    declare -A previous_frame     # declaring associative arrays is mandatory
    previous_frame=([left]=right [down]=up [up]=down [right]=left)

    _bind "$1" silent or \
        , and \
            + compare tags.focus.curframe_wcount = 1 \
            + shift "$2" + focus -e "${previous_frame[$2]}" + close_and_remove \
        , shift "$2" \
        , and \
            + compare tags.focus.curframe_wcount gt 1 \
            + split "${split_dir}" 0.5 + shift "$2"
}
_shift_or_detach Super+Shift+h left
_shift_or_detach Super+Shift+j down
_shift_or_detach Super+Shift+k up
_shift_or_detach Super+Shift+l right

#### Necessary logic because 'focus_crosses_monitor_boundaries' is set to false
_bind $Hyper+Shift+h silent or \
    . shift left \
    . chain , lock , shift_to_monitor -l , focus_monitor -l , unlock
_bind $Hyper+Shift+j silent or \
    . shift down \
    . chain , lock , shift_to_monitor -d , focus_monitor -d , unlock
_bind $Hyper+Shift+k silent or \
    . shift up \
    . chain , lock , shift_to_monitor -u , focus_monitor -u , unlock
_bind $Hyper+Shift+l silent or \
    . shift right \
    . chain , lock , shift_to_monitor -r , focus_monitor -r , unlock

### clients to edge of tag
_bind $Hyper+Shift+Left  shift_edge left
_bind $Hyper+Shift+Down  shift_edge down
_bind $Hyper+Shift+Up    shift_edge up
_bind $Hyper+Shift+Right shift_edge right

### shift clients to monitor
for (( m=0; m<"${monitor_count}";m++ )) ; do
    #### ex. Hyper+Shift+F1      shift_to_monitor 0       focus_monitor 0
    _bind "$Hyper+F$((m+1))" \
                chain , shift_to_monitor "${m}" , focus_monitor "${m}"
done

### clients to 'DEMO' tag for later visualization
_bind $Hyper+Delete chain \
    . lock \
    . add DEMO \
    . try silent substitute ATTR_FORMER_TAG clients.focus.tag \
        new_attr string clients.focus.my_former_tag ATTR_FORMER_TAG \
    . move DEMO \
    . unlock

### Shortcut for 'DEMO' tag
_bind $Hyper+End try silent use DEMO

### Make clients of tag 'DEMO' return to original tags
_bind $Hyper+Insert chain \
    . lock \
    . substitute CUR_TAG tags.focus.name chain \
        - silent substitute TAG tags.by-name.DEMO.name \
            foreach CLIENT clients. and \
                , sprintf TAG_ATTR "%c.tag" CLIENT compare TAG_ATTR "=" TAG \
                , sprintf FORMER_TAG_ATTR "%c.my_former_tag" CLIENT \
                    substitute ORIG_TAG FORMER_TAG_ATTR use ORIG_TAG \
                , sprintf WINID_ATTR '%c.winid' CLIENT \
                    substitute WINID WINID_ATTR and \
                        ,, bring WINID \
                        ,, use_previous \
        - silent and + use DEMO + use_previous \
        - silent merge_tag DEMO \
        - use CUR_TAG \
    . unlock
## }}}3

## resizing {{{3
### frames and floating clients
resizestep=0.01
_bind $Hyper+Left   silent resize left  +"$resizestep"
_bind $Hyper+Down   silent resize down  +"$resizestep"
_bind $Hyper+Up     silent resize up    +"$resizestep"
_bind $Hyper+Right  silent resize right +"$resizestep"
## }}}3

## rotate/mirror {{{3
_bind $Hyper+Ctrl+r         rotate
_bind $Hyper+Ctrl+backslash mirror vertical
_bind $Hyper+Ctrl+plus      mirror both
_bind $Hyper+Ctrl+minus     mirror horizontal
## }}}3

## close/remove {{{3
_bind Super+q         close_or_remove
_bind $Hyper+Shift+x  remove
#### source: (https://github.com/t-wissmann/dotfiles)
### try to close the window, if it is ignored for three times, kill it.
_bind $Hyper+q and \
    , close_and_remove \
    , try silent new_attr int clients.focus.my_close_count 0 \
    , set_attr clients.focus.my_close_count '+=1' \
    , compare clients.focus.my_close_count ge 3 \
    , try sprintf BODY "Killing »%s« (%s)" \
        clients.focus.title clients.focus.winid \
        spawn notify-send BODY \
    , substitute WIN clients.focus.winid spawn xkill -id WIN

### on the focused frame, close all but focused client
_bind $Hyper+Shift+s chain \
    . lock \
    . try silent substitute TAG tags.focus.name \
        substitute FRAME clients.focus.parent_frame.index \
        substitute WINID clients.focus.winid \
        foreach CLIENT clients. and \
            , sprintf TAG_ATTR "%c.tag" CLIENT compare TAG_ATTR "=" TAG \
            , sprintf FRAME_ATTR "%c.parent_frame.index" CLIENT \
                compare FRAME_ATTR "=" FRAME \
            , sprintf WINID_ATTR "%c.winid" CLIENT and \
                ,, compare WINID_ATTR "!=" WINID \
                ,, substitute XWIN WINID_ATTR close XWIN \
    . unlock

### on the focused tag, close all but the focused frame
_bind $Hyper+Ctrl+s chain \
    . lock \
    . try silent substitute TAG tags.focus.name \
        substitute FRAME clients.focus.parent_frame.index \
        foreach CLIENT clients. and \
            , sprintf TAG_ATTR "%c.tag" CLIENT compare TAG_ATTR "=" TAG \
            , sprintf FRAME_ATTR "%c.parent_frame.index" CLIENT \
                compare FRAME_ATTR "!=" FRAME \
            , sprintf WINID_ATTR "%c.winid" CLIENT \
                substitute XWINS WINID_ATTR close XWINS \
    . foreach F tags.focus.tiling.root --recursive remove \
    . unlock

### excluding focused tag close all other clients and frames
_bind $Hyper+Ctrl+Shift+s chain \
    . lock \
    . try silent substitute TAG tags.focus.name and \
        - foreach T tags.by-name. \
            sprintf TAG_ATTR "%c.name" T and \
            , compare TAG_ATTR "!=" TAG \
            , substitute SEL_TAG TAG_ATTR and \
                ,, use SEL_TAG \
                ,, foreach F tags.focus.tiling.root --recursive remove \
                ,, use_previous \
        - foreach C clients. and \
            , sprintf CTAG_ATTR "%c.tag" C compare CTAG_ATTR "!=" TAG \
            , sprintf WINID_ATTR "%c.winid" C \
                substitute XWIN WINID_ATTR close XWIN \
    . unlock
## }}}3
## }}}2

# layouting {{{2
## Frames
_bind $Hyper+Ctrl+h chain , split left   0.5 , focus left
_bind $Hyper+Ctrl+j chain , split bottom 0.5 , focus down
_bind $Hyper+Ctrl+k chain , split top    0.5 , focus up
_bind $Hyper+Ctrl+l chain , split right  0.5 , focus right
_bind $Hyper+Ctrl+space split explode
#### source: (https://github.com/t-wissmann/dotfiles)
### changes frame layout from 1/2 2/3 1/3 of tag size
_bind $Hyper+Ctrl+ccedilla \
            cycle_value tags.focus.tiling.root.fraction 0.5 0.6666 0.3333

## Clients
_bind $Hyper+f floating toggle
_bind $Hyper+z fullscreen toggle
_bind $Hyper+Shift+f set_attr clients.focus.floating toggle
_bind $Hyper+Shift+d set_attr clients.focus.decorated toggle
_bind $Hyper+Shift+n silent set_attr clients.focus.minimized true
_bind $Hyper+Shift+m jumpto last-minimized
## unminimized all clients
_bind $Hyper+Shift+u \
    foreach CLIENT clients. \
        sprintf MINATT "%c.minimized" CLIENT and \
            , compare MINATT "=" "true" \
            , set_attr MINATT false

##  layout cycling. skipping grid when clients=2 (grid=horizontal)
_bind $Hyper+minus or \
    , and ,, compare tags.focus.curframe_wcount = 2 \
          ,, cycle_layout +1 vertical horizontal max \
    , cycle_layout +1
## }}}2

# customize theme {{{2
## Helper function to minimize repetition
_kavs() { # $1 keybind $2 attribute $3 values $4 string
    # shellcheck disable=SC2086
    _bind "$1" and \
        , cycle_value "$2" $3 \
        , sprintf BODY "$4" "$2" spawn notify-send BODY;}

## frames
_kavs Super+Ctrl+d      settings.show_frame_decorations \
    "none nonempty if_multiple if_empty focused focused_if_multiple all" \
    "Frame decorations: %s"
_kavs Super+Ctrl+s      settings.smart_frame_surroundings \
    "hide_all hide_gaps off" \
    "Smart frame surroundings: %s"
_kavs Super+Ctrl+g      settings.frame_gap \
    "${u_steps[*]}" \
    "Frame gap: %s"
_kavs Super+Ctrl+p      settings.frame_padding \
    "${u_steps[*]}" \
    "Frame padding: %s"
### frame_border_inner_width=0 (default) MUST be < frame_border_width (below)
_kavs Super+Ctrl+b      settings.frame_border_width \
    "${u_steps[*]:1}" \
    "Frame border width: %s"

## opacity
_kavs Super+Ctrl+o      settings.frame_active_opacity \
    "${u_opac_steps[*]}" \
    "Frame active opacity: %s"
_kavs Super+Ctrl+Shift+o settings.frame_normal_opacity \
    "${u_opac_steps[*]}" \
    "Frame normal opacity: %s"

## windows
_kavs Super+Shift+g     settings.window_gap \
    "${u_steps[*]}" \
    "Window gap: %s"

## title
_kavs Super+Shift+t     theme.title_when \
    "never one_tab multiple_tabs always" \
    "Theme title when: %s"

## border
_kavs Super+Shift+b     theme.border_width \
    "${u_seq_steps[*]:3:10}" \
    "Theme border gap: %s"

## }}}2
# }}}1

# Theme configs / Colors {{{1
## TODO major overhaul is necessary. Implement colors related cycle_values
# frame
_set frame_bg_active_color     "${xrdb_colors[3]:-#ffa623}""23"
_set frame_bg_normal_color     "${xrdb_colors[0]:-#000000}"
_set frame_border_active_color "${xrdb_colors[9]:-#ff4000}"
_set frame_border_normal_color "${xrdb_colors[0]:-#000000}""00"
_set frame_border_inner_color  "${xrdb_colors[0]:-#000000}"

# ================================ Themes ================================
#
## -------------------- background_color --------------------
_attr theme.background_color      "${xrdb_colors[0]:-#000000}"
## -------------------- border_width --------------------
_attr theme.border_width "${u_seq_steps[3]}"  # diff from inner_width >= 1
_attr theme.floating.border_width "${u_seq_steps[6]}"
## -------------------- color --------------------
_attr theme.color         "${xrdb_colors[0]:-#000000}"
_attr theme.active.color  "${xrdb_colors[12]:-#4db8ff}"
_attr theme.normal.color  "${xrdb_colors[1]:-#000000}""00"
_attr theme.minimal.color "${xrdb_colors[12]:-#4db8ff}"
_attr theme.urgent.color  "${xrdb_colors[2]:-#e27878}"
## -------------------- inner_color --------------------
_attr theme.inner_color "${xrdb_colors[0]:-#000000}" # should match background
_attr theme.active.inner_color "${xrdb_colors[12]:-#4db8ff}"
_attr theme.normal.inner_color "${xrdb_colors[0]:-#000000}""00"
_attr theme.urgent.inner_color "${xrdb_colors[3]:-#ffa623}"
## -------------------- inner_width      --------------------
_attr theme.inner_width "${u_seq_steps[2]}"      # check note of border_width
## -------------------- outer_color --------------------
_attr theme.outer_color "${xrdb_colors[0]:-#000000}"
### copy 'inner_color' to 'outer_color'
for state in active normal urgent ; do
    _hc substitute C theme.${state}.inner_color \
        set_attr theme.${state}.outer_color C
done
_attr theme.floating.outer_color "${xrdb_colors[5]:-#7759b4}"
## -------------------- outer_width      --------------------
_attr theme.outer_width 0
_attr theme.floating.outer_width "${u_seq_steps[2]}"
## -------------------- padding --------------------
# _attr theme.padding_bottom  0
# _attr theme.padding_left    0
# _attr theme.padding_right   0
# _attr theme.padding_top     0
## -------------------- tab_color --------------------
_attr theme.tab_color         "${xrdb_colors[6]:-#3f83a6}"
_attr theme.active.tab_color  "${xrdb_colors[4]:-#2d539e}"
_attr theme.minimal.tab_color "${xrdb_colors[6]:-#3f83a6}"
## -------------------- tab_outer_color --------------------
# _attr theme.tab_outer_color ""
_attr theme.active.tab_outer_color "${xrdb_colors[14]:-#84a0c6}"
## -------------------- tab_outer_width --------------------
# _attr theme.tab_outer_width ""
## -------------------- tab_title_color --------------------
# _attr theme.tab_title_color ""
_attr theme.active.tab_title_color "${xrdb_colors[8]:-#ababab}"
## -------------------- tight_decoration --------------------
# _attr theme.tight_decoration false
## -------------------- title_align --------------------
# _attr theme.title_align  left
## -------------------- title_color --------------------
_attr theme.title_color     "${xrdb_colors[15]:-#ffffff}"
_attr theme.normal.title_color  "${xrdb_colors[7]:-#c6c8d1}"
_attr theme.minimal.title_color "${xrdb_colors[15]:-#ffffff}"
## -------------------- title_depth --------------------
## _attr theme.minimal.title_depth 4 # space below the title's baseline
## ------------  title_align  title_depth  title_font  title_height  ------------
for i in . .active. .floating. .fullscreen. .minimal. .normal. .tiling. .urgent. ; do
    _attr theme"$i"title_align 'center'
    _attr theme"$i"title_depth 4
    _attr theme"$i"title_font 'Iosevka Zenodotus Fixed:size=11'
    _attr theme"$i"title_height 14
done
## -------------------- title_height --------------------
## _attr theme.minimal.title_height 14
## -------------------- title_when --------------------
_attr theme.title_when multiple_tabs
_attr theme.minimal.title_when multiple_tabs
##  ===========================================================
#
# _hc foreach T theme. sprintf CHILDREN "%c.reset" T set_attr CHILDREN true
# for state in active urgent normal ; do
#   _hc substitute C theme.${state}.inner_color \
#       attr theme.${state}.outer_color C
# }}}1

# USER Settings {{{1
## global
_set focus_crosses_monitor_boundaries false
_set show_frame_decorations focused
_set frame_bg_transparent false
_set smart_window_surroundings true
_set mouse_recenter_gap 0
_set focus_follows_mouse false
_set auto_detect_monitors true
_set update_dragged_clients false
_set swap_monitors_to_get_tag false
_set smart_frame_surroundings hide_gaps
_set tree_style '╾│ ├└╼─┐'
_set default_frame_layout max
#### source: (https://github.com/t-wissmann/dotfiles)
## making open frames revert to default layout on reload
_hc substitute ALGO settings.default_frame_layout \
    try silent foreach T tags.by-name. \
    sprintf ATTR '%c.tiling.root.algorithm' T \
    set_attr ATTR ALGO

## frames
_set frame_gap      "${u_seq_steps[0]}"
_set frame_padding  "${u_seq_steps[0]}"
_set frame_border_width "${u_seq_steps[3]}"  # must >=1 from inner_width
_set frame_border_inner_width "${u_seq_steps[0]}" # check previous note

## windows
_set window_gap "${u_seq_steps[0]}"

## opacity
_set frame_active_opacity "${u_opac_steps[1]}"
_set frame_normal_opacity "${u_opac_steps[3]}"
# }}}1

# Rules {{{1
_rule focus=on index=e # new clients are open in the closest available frame
_rule floatplacement=none
_rule fixedsize floating=on
#_rule class~'(.*[Rr]xvt.*|.*[Tt]erm.*|st)' focus=on # give focus to terminals
_rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
_rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on floatplacement=center
_rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
_rule windowrole~'browser' monitor=2
_rule windowrole~'PictureInPicture' monitor=1 floating=false fullscreen=true
_rule class=mpv tag="${tag_names[1]}" fullscreen=true
# Taking Mod4(Super) keybindings from HLWM while on Emacs.
_rule class=Emacs tag="${tag_names[0]}" keys_inactive="^Mod4.*" fullscreen=true
### I need them available in Emacs since I don't play the piano... ;)
# }}}1

# Startup {{{1
## Preferred layout on startup
if ! _autostart_reload; then
    _hc load "${tag_names[0]}" \
        '(split horizontal:0.5:1 (clients max:0) (clients max:0))'
    # Killing the following error generated by firefox:
    # "ATTENTION: default value of option mesa_glthread overridden by env..."
    _hc export MESA_DEBUG=silent
    _hc chain . spawn emacs . spawn firefox
    _hc new_attr bool my_not_first_autostart true
fi

_hc unlock
unset tag_keys tag_names u_monitor_name monitor_count
# }}}1

## Emacs
# Local Variables:
# eval: (indent-tabs-mode nil)
# End:

## Vim
# vim: set ts=4 expandtab fdm=marker:
