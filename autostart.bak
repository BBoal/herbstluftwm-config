#!/usr/bin/env bash
# shellcheck source=/dev/null disable=SC2207

# HerbstluftWM Config  --- Tweaked and tailored for personal use with
# the help of several knowledgeable mentioned individuals.
#
# Copyright (c) 2023  Bruno Boal <bruno.boal@tutanota.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.	If not, see <http://www.gnu.org/licenses/>.


# Functions {{{1
_hc()   { herbstclient "$@";}
_bind() { _hc keybind "$@";}
_set()  { _hc set "$@";}
_attr() { _hc attr "$@";}
_rule() { _hc rule "$@";}
_kavs() {
    # $1 keybind $2 attribute $3 values $4 string
    # shellcheck disable=SC2086
    _bind "$1" and , cycle_value "$2"  $3 \
		   , sprintf BODY "$4" "$2" spawn notify-send BODY
}
# }}}1

# Initialization {{{1
_hc emit_hook reload
[[ -f "${XDG_CONFIG_HOME:-~/.config}"/user-dirs.dirs ]] && \
    source "${XDG_CONFIG_HOME:-~/.config}/user-dirs.dirs"

## TODO Colors
my_background='#000000'

xsetroot -xcf "$XDG_DATA_HOME/icons/volantes_light_cursors/cursors/left_ptr" 17 \
	 -solid "${my_background:-#000000}"

### source: (https://github.com/ypnos/hlwm)
## clearing bindings and rules
for action in keyunbind mouseunbind unrule ; do
    _hc "$action" --all
done

## resets active,floating,fullscreen,minimal,normal,tiling and urgent
_hc foreach T theme. sprintf CHILDREN "%c.reset" T set_attr CHILDREN true

### source: (https://github.com/t-wissmann/dotfiles)
## remove empty tags
_hc foreach T tags.by-name \
   sprintf ATTR_client_count '%c.client_count' T \
   and , compare ATTR_client_count = 0 \
       , sprintf ATTR_NAME '%c.name' T \
	 substitute NAME ATTR_NAME merge_tag NAME
# }}}1

# Variables {{{1
## Host
HOSTNAME=$(hostname)

## Modkeys
Hyper=Mod3

## config dir
hc_dir="$HOME/.config/herbstluftwm"
_hc export HLWM_HOME="${hc_dir}"

## wallpapers dir
wallpapers="$HOME"/.config/wallpapers

### source: (https://github.com/t-wissmann/dotfiles)
## steps and opac_steps array declaration
## TODO implement theme/colors related cycle_values in sxhkd
seq_steps=( $(seq 0 24) )
steps=( $(seq 0 2 8) $(seq 12 4 24) $(seq 32 8 64) $(seq 57 -8 33) \
	$(seq 25 -4 13) $(seq 9 -2 1) )
readarray -t opac_steps < <(seq 100 -10 10)
### Offset example: "${seq_steps[@]:1}"  ->  1 2 3 4 5 6 7 8 9 10 .. 24

# }}}1

# Wallpaper {{{1
if [[ "${HOSTNAME}" =~ tiny|desktop ]]; then
   xwallpaper --output DP-2-1 --center "$wallpapers"/root_blue.png \
	      --output HDMI-1 --center "$wallpapers"/cron_blue.png
	      # --output DP-2-8 --center "$wallpapers"/wallhaven-wq8ewp_1200x1920.png
fi
## }}}1

# KEYBINDINGS {{{1
# mouse {{{2
_hc mousebind Super-Button1 move
_hc mousebind Super-Button2 zoom
_hc mousebind Super-Button3 resize
# }}}2

# top level commands {{{2
_bind $Hyper-Alt-q   spawn "systemctl shutdown"
_bind $Hyper-Alt-l   quit
_bind $Hyper-Alt-r   reload
# }}}2

# launching programs {{{2
## general
_bind Super-Return       spawn "${TERMINAL:-xterm}"
_bind Super-Delete       spawn xterm -e "$HOME/scripts/tm" #TMUX
_bind $Hyper-Return      spawn rofi -show window -modi window -show-icons #Client list
_bind $Hyper-Scroll_Lock spawn slock
## specific
_bind $Hyper-Super-w     spawn firefox
_bind $Hyper-Super-e     spawn emacs
_bind $Hyper-Super-m     spawn thunar
_bind $Hyper-Super-r     spawn "$hc_dir/dmenu_run_hlwm_v2"
# }}}2

# tags definition {{{2
# TODO Workspaces should move as a block in all monitors
tag_names=( {A..F} )
tag_keys=( {1..6} )
_hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
   _hc add "${tag_names[$i]}"
   key="${tag_keys[$i]}"
   if [ -n "$key" ] ; then
       _bind "Super-$key" or \
	     . and , compare tags.focus.index = "$i" , try use_previous \
	     . use_index "$i"
       _bind "$Hyper-$key" move_index "$i"
   fi
done
# }}}2

# motions {{{2
## focus {{{3
### clients
_bind Super-h	       focus left  --level=all
_bind Super-j          focus down  --level=all
_bind Super-k          focus up    --level=all
_bind Super-l          focus right --level=all
_bind Super-Left       focus_edge left
_bind Super-Down       focus_edge down
_bind Super-Up         focus_edge up
_bind Super-Right      focus_edge right
### visible clients only
_bind $Hyper-h	       focus left  -i
_bind $Hyper-j	       focus down  -i
_bind $Hyper-k	       focus up    -i
_bind $Hyper-l	       focus right -i
### monitors
_bind Super-y	       focus_monitor -l
_bind Super-u	       focus_monitor -d
_bind Super-i	       focus_monitor -u
_bind Super-o	       focus_monitor -r
### focus previous tag
_bind Super-BackSpace  use_previous
### source: (https://github.com/t-wissmann/dotfiles)
## jumps to urgent either from a client or a frame
## next call will try to return to previous client if applicable
_bind $Hyper-i         or \
    : substitute WINID clients.focus.winid and \
	. jumpto urgent \
	. try new_attr string clients.my_oldfocus \
	. set_attr clients.my_oldfocus WINID \
    : jumpto urgent \
    : substitute WINID clients.my_oldfocus and \
	. jumpto WINID \
	. remove_attr clients.my_oldfocus \
	. spawn notify-send -t 1000 -i edit-undo HLWM 'Jump to previously focused window' \
    : spawn notify-send -t 1000 -i messagebox_warning HLWM 'No urgent or formerly focused window'

#### see contents of Depot tag
_bind $Hyper-End	       try silent use Depot
## }}}3

## cycle {{{3
### clients and frames
_bind Super-Tab        cycle_all +1
_bind Super-Shift-Tab  cycle_all -1
### clients
_bind Super-b	       cycle +1
_bind Super-Shift-b    cycle -1
### frames
_bind Super-v	       cycle_frame +1
_bind Super-Shift-v    cycle_frame -1
### tags
_bind Super-period     use_index +1 --skip-visible
_bind Super-comma      use_index -1 --skip-visible
### monitors
_bind Super-c          cycle_monitor +1
_bind Super-Shift-c    cycle_monitor -1
## }}}3

## shifting {{{3
### clients and frames
_bind $Hyper-Shift-h  shift left
_bind $Hyper-Shift-j  shift down
_bind $Hyper-Shift-k  shift up
_bind $Hyper-Shift-l  shift right
### clients to edge of tag
_bind $Hyper-Shift-Left   shift_edge left
_bind $Hyper-Shift-Down   shift_edge down
_bind $Hyper-Shift-Up     shift_edge up
_bind $Hyper-Shift-Right  shift_edge right

### clients to Depot tag for later visualization
### TODO make clients return to original tags/frames
_bind $Hyper-Delete chain . add Depot . move Depot
_bind $Hyper-Insert try silent merge_tag Depot
## }}}3

## resizing {{{3
### frames and floating clients
resizestep=0.01
_bind $Hyper-Left   resize left  +$resizestep
_bind $Hyper-Down   resize down  +$resizestep
_bind $Hyper-Up     resize up	 +$resizestep
_bind $Hyper-Right  resize right +$resizestep
## }}}3

## rotate/mirror {{{3
_bind $Hyper-Ctrl-r	     rotate
_bind $Hyper-Ctrl-backslash  mirror vertical
_bind $Hyper-Ctrl-plus	     mirror both
_bind $Hyper-Ctrl-minus	     mirror horizontal
## }}}3

## close/remove {{{3
_bind Super-q	      close_or_remove
_bind $Hyper-Shift-x  remove
#### source: (https://github.com/t-wissmann/dotfiles)
### try to close the window, if it is ignored for three times, kill it.
_bind $Hyper-q and \
    , close_and_remove \
    , try silent new_attr int clients.focus.my_close_count 0 \
    , set_attr clients.focus.my_close_count '+=1' \
    , compare clients.focus.my_close_count ge 3 \
    , try sprintf BODY \
      "Killing »%s« (%s)" \
	  clients.focus.title clients.focus.winid \
	  spawn notify-send BODY \
	  , substitute WIN clients.focus.winid spawn xkill -id WIN

### on the focused frame, close all but focused client
_bind $Hyper-Shift-s \
    chain \
    . lock \
    . substitute TAG tags.focus.name \
      substitute FRAME clients.focus.parent_frame.index \
      substitute WINID clients.focus.winid \
      foreach CLIENT clients. \
      sprintf TAG_ATTR "%c.tag" CLIENT \
      sprintf FRAME_ATTR "%c.parent_frame.index" CLIENT \
      sprintf WINID_ATTR "%c.winid" CLIENT and \
      , compare TAG_ATTR "=" TAG \
      , compare FRAME_ATTR "=" FRAME \
      , compare WINID_ATTR "!=" WINID \
      , substitute XWIN WINID_ATTR close XWIN \
    . unlock
### on the focused tag, close all but the focused frame
_bind $Hyper-Ctrl-s \
    chain \
    . lock \
    . try silent substitute TAG tags.focus.name \
      substitute FRAME clients.focus.parent_frame.index \
      foreach CLIENT clients. \
      sprintf TAG_ATTR "%c.tag" CLIENT \
      sprintf FRAME_ATTR "%c.parent_frame.index" CLIENT \
      sprintf WINID_ATTR "%c.winid" CLIENT and \
	 , compare TAG_ATTR "=" TAG \
	 , compare FRAME_ATTR "!=" FRAME \
	 , substitute XWINS WINID_ATTR close XWINS \
    . foreach F tags.focus.tiling.root --recursive remove \
    . unlock
### close all clients and frames from all tags except the focused one
_bind $Hyper-Ctrl-Shift-s \
      chain \
      . lock \
      . try silent substitute TAG tags.focus.name and \
	  - foreach T tags.by-name. \
	    sprintf TAG_ATTR "%c.name" T and \
	      , compare TAG_ATTR "!=" TAG \
	      , substitute SEL_TAG TAG_ATTR and \
		,, use SEL_TAG \
		,, foreach F tags.focus.tiling.root --recursive remove \
	  - foreach C clients. \
	    sprintf CTAG_ATTR "%c.tag" C and \
	    ,, compare CTAG_ATTR "!=" TAG \
	    ,, sprintf WINID_ATTR "%c.winid" C \
	       substitute XWIN WINID_ATTR close XWIN \
      . unlock . use TAG

## }}}3

## }}}2

# layouting {{{2
## Frames
_bind $Hyper-Ctrl-h chain , split left    0.5 , focus left
_bind $Hyper-Ctrl-j chain , split bottom  0.5 , focus down
_bind $Hyper-Ctrl-k chain , split top     0.5 , focus up
_bind $Hyper-Ctrl-l chain , split right   0.5 , focus right
_bind $Hyper-Ctrl-space split explode
#### source: (https://github.com/t-wissmann/dotfiles)
### changes frame layout from 1/2 2/3 1/3 of tag size
_bind $Hyper-Ctrl-ccedilla cycle_value tags.focus.tiling.root.fraction 0.5 0.6666 0.3333

## Clients
## TODO confirm if all are needed
_bind $Hyper-f floating toggle
_bind $Hyper-z fullscreen toggle
_bind $Hyper-p pseudotile toggle
_bind $Hyper-Shift-f set_attr clients.focus.floating toggle
_bind $Hyper-Shift-d set_attr clients.focus.decorated toggle
_bind $Hyper-Shift-n set_attr clients.focus.minimized true
_bind $Hyper-Shift-m jumpto last-minimized
## unminimized all clients
_bind $Hyper-Shift-u \
   substitute FOCUS "tags.focus.name" \
   foreach CLIENT clients. \
      sprintf MINATT "%c.minimized" CLIENT \
      sprintf TAGATT "%c.tag" CLIENT and \
      , compare MINATT "=" "true" \
      , compare TAGATT "=" FOCUS \
      , set_attr MINATT false
##  layout cycling. skipping grid when clients=2 (grid=horizontal)
#### TODO check dimensions on curwindow to ignore silly layouts
_bind $Hyper-minus \
   or , and ,, compare tags.focus.curframe_wcount = 2 \
	    ,, cycle_layout +1 vertical horizontal max \
      , cycle_layout +1
## }}}2

# customize theme {{{2
## frames
_kavs Super-Ctrl-d	settings.show_frame_decorations \
			"none nonempty if_multiple if_empty focused focused_if_multiple all" \
			"Frame decorations: %s"
_kavs Super-Ctrl-s	settings.smart_frame_surroundings "hide_all hide_gaps off" \
			"Smart frame surroundings: %s"
_kavs Super-Ctrl-g	settings.frame_gap "${steps[*]}" \
			"Frame gap: %s"
_kavs Super-Ctrl-p	settings.frame_padding "${steps[*]}" \
			"Frame padding: %s"
### frame_border_inner_width = 0 (default) and MUST be less than frame_border_width (below)
_kavs Super-Ctrl-b	settings.frame_border_width "${steps[*]:1}" \
			"Frame border width: %s"
## opacity
_kavs Super-Ctrl-o	 settings.frame_active_opacity "${opac_steps[*]}" \
			"Frame active opacity: %s"
_kavs Super-Ctrl-Shift-o settings.frame_normal_opacity "${opac_steps[*]}" \
			"Frame normal opacity: %s"

## windows
_kavs Super-Shift-g	settings.window_gap "${steps[*]}" \
			"Window gap: %s" settings.window_gap \

## title
_kavs Super-Shift-t	theme.title_when \
			"never one_tab multiple_tabs always" \
			"Theme title when: %s"

## border
_kavs Super-Shift-b	theme.border_width "${seq_steps[*]:3:10}" \
			"Theme border gap: %s"

## }}}2

# }}}1

# Colors {{{1
## TODO major overhaul is necessary
# title
_attr theme.title_color '#ffffff'
_attr theme.normal.title_color '#c6c8d1'

# frame
_set frame_border_active_color '#84a0c6'
_set frame_border_normal_color '#33374c'
_set frame_bg_normal_color '#000000'
_set frame_bg_active_color '#00002e'

# active, normal, urgent
_attr theme.active.color '#668e3d'
_attr theme.active.inner_color '#00000000'
_attr theme.normal.color '#444b71'
_attr theme.normal.inner_color '#00000000'
_attr theme.urgent.color '#e27878'
_attr theme.urgent.inner_color '#c57339'
# copy inner color to outer_color
for state in active urgent normal ; do
   _hc substitute C theme.${state}.inner_color \
	      attr theme.${state}.outer_color C
done
_attr theme.floating.outer_color '#7759b4'

# tab
_attr theme.tab_color '#3f83a6'
_attr theme.active.tab_color '#2d539e'
_attr theme.active.tab_outer_color '#84a0c6'
_attr theme.active.tab_title_color '#ababab'

_attr theme.background_color "${my_background:-#000000}"

# }}}1

# USER Settings {{{1
## global
_set show_frame_decorations focused
_set frame_bg_transparent on
_set smart_window_surroundings on
_set mouse_recenter_gap 0
_set focus_follows_mouse 0
_set auto_detect_monitors on
_set update_dragged_clients false
_set swap_monitors_to_get_tag off
_set smart_frame_surroundings hide_gaps
_set tree_style '╾│ ├└╼─┐'
_set default_frame_layout max
#### source: (https://github.com/t-wissmann/dotfiles)
## making open frames revert to default layout on reload
_hc substitute ALGO settings.default_frame_layout \
      foreach T tags.by-name. \
      sprintf ATTR '%c.tiling.root.algorithm' T \
      set_attr ATTR ALGO

## frames
_set frame_gap "${seq_steps[1]}"
_set frame_padding "${seq_steps[0]}"
_set frame_border_width "${seq_steps[2]}"

## opacity
_set frame_active_opacity "${opac_steps[0]}"
_set frame_normal_opacity "${opac_steps[1]}"

## windows
_set window_gap "${seq_steps[1]}"

## title
_attr theme.title_when multiple_tabs
_attr theme.title_height 14
_attr theme.title_font 'SudoUI Nerd Font:size=13'  # example using Xft
_attr theme.title_depth 4  # space below the title's baseline

## border
_attr theme.border_width 3 # must have diff >=1 from inner_width
_attr theme.inner_width 2  # check previous note
# TODO background
_attr theme.inner_color "${my_background:-#000000}" # should match background color

## floating windows
_attr theme.floating.border_width 6
_attr theme.floating.outer_width 2

# Theme Minimal
_attr theme.minimal.title_color '#ffffff'
_attr theme.minimal.title_depth 4
_attr theme.minimal.title_align 'center'
_attr theme.minimal.title_font 'AardvarkFixed Nerd Font Mono:size=11'
_attr theme.minimal.tab_color '#3f83a6'
_attr theme.minimal.color "${color10:-#03a9f4}"
_attr theme.minimal.title_when multiple_tabs
_attr theme.minimal.title_height 14
#}}}1

# Rules {{{1
_rule focus=on index=e # new clients are open in the closest available frame with focus
_rule floatplacement=none
_rule fixedsize floating=on
#_rule class~'(.*[Rr]xvt.*|.*[Tt]erm.*|st)' focus=on # give focus to most common terminals
_rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
_rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on floatplacement=center
_rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
_rule class=firefox tag=C
_rule class=emacs tag=A
# }}}1

# Init {{{1
## unlock, just to be sure
_hc unlock

## multi-monitor setup
_hc detect_monitors
name_monitors=( "bottom" "top" "right" )
for m in "${!name_monitors[@]}" ;  do
    _hc rename_monitor "${m}" "${name_monitors[${m}]}"
done
### clients to monitor (have to be defined AFTER '_hc detect_monitors')
#### ex. Hyper-Shift-F1  shift_to_monitor 0
for m in $(seq 1 "$(_attr monitors.count)") ; do
  _bind "$Hyper-Shift-F${m}" chain , shift_to_monitor "$((m-1))" , focus_monitor "$((m-1))"
done

## program list
startup_bin=( "unclutter" \
	      "picom -b" \
	      "nm-applet" \
	      "xautolock -time 20 -locker slock -nowlocker slock -detectsleep -corners 000+ -cornerdelay 3" \
	      "polybar &> /dev/null " \
	      "redshift -c $XDG_CONFIG_HOME/redshift/redshift.conf" )

for bin in "${startup_bin[@]}"; do
  proc=${bin%% *}
  [[ $(pidof "${proc}") -gt 0 ]] && killall "${proc}"
  eval "${bin}" &
done

# setting Xresources
presentHour=$(date +%k)
if [[ -n $DISPLAY && -n $XDG_VTNR ]]; then
  xrdb -DHOUR_OF_DAY="$presentHour" -load "$HOME"/.Xresources
fi

# Preferred layout
_hc load A '(split horizontal:0.5:1 (clients max:0) (clients max:0))'
if _hc silent new_attr bool my_not_first_autostart ; then
    _hc chain . spawn emacs . spawn firefox
fi
# }}}1


# vim: set fdm=marker:
